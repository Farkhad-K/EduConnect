// <auto-generated />
using System;
using EduConnect.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduConnect.Api.Data.Migrations
{
    [DbContext(typeof(EduConnectDbContext))]
    [Migration("20250327154801_ChangedRealtionsBetweenEntities")]
    partial class ChangedRealtionsBetweenEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.Property<Guid>("ClassesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentClasses", (string)null);
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UniqueToken")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("Id");

                    b.HasIndex("UniqueToken")
                        .IsUnique();

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcademyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("TokenOfAcademy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcademyId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Schedule")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("Name", "AcademyId")
                        .IsUnique();

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcademyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TokenOfAcademy")
                        .HasColumnType("text");

                    b.Property<string>("UniqueToken")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("UniqueToken")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.SuperAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmins");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AcademyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("TokenOfAcademy")
                        .HasColumnType("text");

                    b.Property<string>("UniqueToken")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ParentStudent", b =>
                {
                    b.Property<Guid>("ParentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ParentsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ParentStudents", (string)null);
                });

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.HasOne("EduConnect.Api.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Api.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Admin", b =>
                {
                    b.HasOne("EduConnect.Api.Entities.Academy", "Academy")
                        .WithMany("Admins")
                        .HasForeignKey("AcademyId");

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Class", b =>
                {
                    b.HasOne("EduConnect.Api.Entities.Academy", "Academy")
                        .WithMany("Classes")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduConnect.Api.Entities.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Academy");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Student", b =>
                {
                    b.HasOne("EduConnect.Api.Entities.Academy", "Academy")
                        .WithMany("Students")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Teacher", b =>
                {
                    b.HasOne("EduConnect.Api.Entities.Academy", "Academy")
                        .WithMany("Teachers")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("ParentStudent", b =>
                {
                    b.HasOne("EduConnect.Api.Entities.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Api.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Academy", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Classes");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EduConnect.Api.Entities.Teacher", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
